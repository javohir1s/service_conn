// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: order_status_notes.proto

package order_status_notes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderStatusService_Create_FullMethodName  = "/orderstatus.OrderStatusService/Create"
	OrderStatusService_GetByID_FullMethodName = "/orderstatus.OrderStatusService/GetByID"
	OrderStatusService_PUTCH_FullMethodName   = "/orderstatus.OrderStatusService/PUTCH"
)

// OrderStatusServiceClient is the client API for OrderStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderStatusServiceClient interface {
	Create(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error)
	GetByID(ctx context.Context, in *OrderPrimaryKeyRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error)
	PUTCH(ctx context.Context, in *OrderPrimaryStatusKeyRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error)
}

type orderStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderStatusServiceClient(cc grpc.ClientConnInterface) OrderStatusServiceClient {
	return &orderStatusServiceClient{cc}
}

func (c *orderStatusServiceClient) Create(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error) {
	out := new(GetOrderStatusResponse)
	err := c.cc.Invoke(ctx, OrderStatusService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusServiceClient) GetByID(ctx context.Context, in *OrderPrimaryKeyRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error) {
	out := new(GetOrderStatusResponse)
	err := c.cc.Invoke(ctx, OrderStatusService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusServiceClient) PUTCH(ctx context.Context, in *OrderPrimaryStatusKeyRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error) {
	out := new(GetOrderStatusResponse)
	err := c.cc.Invoke(ctx, OrderStatusService_PUTCH_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderStatusServiceServer is the server API for OrderStatusService service.
// All implementations should embed UnimplementedOrderStatusServiceServer
// for forward compatibility
type OrderStatusServiceServer interface {
	Create(context.Context, *CreateStatusRequest) (*GetOrderStatusResponse, error)
	GetByID(context.Context, *OrderPrimaryKeyRequest) (*GetOrderStatusResponse, error)
	PUTCH(context.Context, *OrderPrimaryStatusKeyRequest) (*GetOrderStatusResponse, error)
}

// UnimplementedOrderStatusServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrderStatusServiceServer struct {
}

func (UnimplementedOrderStatusServiceServer) Create(context.Context, *CreateStatusRequest) (*GetOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderStatusServiceServer) GetByID(context.Context, *OrderPrimaryKeyRequest) (*GetOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedOrderStatusServiceServer) PUTCH(context.Context, *OrderPrimaryStatusKeyRequest) (*GetOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUTCH not implemented")
}

// UnsafeOrderStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderStatusServiceServer will
// result in compilation errors.
type UnsafeOrderStatusServiceServer interface {
	mustEmbedUnimplementedOrderStatusServiceServer()
}

func RegisterOrderStatusServiceServer(s grpc.ServiceRegistrar, srv OrderStatusServiceServer) {
	s.RegisterService(&OrderStatusService_ServiceDesc, srv)
}

func _OrderStatusService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStatusService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).Create(ctx, req.(*CreateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStatusService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPrimaryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStatusService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).GetByID(ctx, req.(*OrderPrimaryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStatusService_PUTCH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPrimaryStatusKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStatusServiceServer).PUTCH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStatusService_PUTCH_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStatusServiceServer).PUTCH(ctx, req.(*OrderPrimaryStatusKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderStatusService_ServiceDesc is the grpc.ServiceDesc for OrderStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderstatus.OrderStatusService",
	HandlerType: (*OrderStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderStatusService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _OrderStatusService_GetByID_Handler,
		},
		{
			MethodName: "PUTCH",
			Handler:    _OrderStatusService_PUTCH_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_status_notes.proto",
}
